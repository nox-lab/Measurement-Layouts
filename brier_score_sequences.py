import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import json

# Extracting data points
model_steps = np.arange(50)  # Optimisation steps 1 to 50


# df = pd.read_csv(r"csv_recordings\predictive_data\predictive_results_for_agents.csv")


# brier_scores = [
#     0.16196177871975245, 0.17199881849746582, 0.19792771621148453, 0.1700799840427088,
#     0.16333465215470022, 0.17449667950998593, 0.18996170015844713, 0.1579952091250403,
#     0.15633278408032714, 0.17228736880329976, 0.20683608207038767, 0.16846634434296273,
#     0.1603755102725526, 0.19016460424400897, 0.17987348220077531, 0.17429583593388756,
#     0.18323520645534483, 0.1431095643562996, 0.18376381731192726, 0.18215306290340455,
#     0.16372850095049088, 0.14036781903333992, 0.17319595023902395, 0.1588620772493556,
#     0.15300104357186342, 0.1655439369762199, 0.16240659237599098, 0.18156996926083216,
#     0.1491685112067527, 0.15601126220639092, 0.15783647844926488, 0.15171943367775861,
#     0.19295853513884226, 0.16829256643785925, 0.1518238352083488, 0.14288692038232845,
#     0.14074751999771415, 0.136135492510862, 0.14473070496644064, 0.14460450537840208,
#     0.13000624006513756, 0.13880232072582577, 0.141800997475135, 0.1402579613953373,
#     0.13440184419474024, 0.12836651085607664, 0.13733661265786426, 0.12511945703977126,
#     0.12016099214645616, 0.13788319722211806
# ]

# Extracting data points for the other two sequences
model_steps_2 = np.arange(36)  # Steps from 40000 to 2000000
# brier_scores_2 = [
#     0.17337808203490276, 0.17830042465770793, 0.1782296865950011, 0.1654475201031205,
#     0.17884793319958547, 0.1740263653028287, 0.18427187489752592, 0.17438116092365888,
#     0.18750461686547226, 0.1976870163962312, 0.1904717358465315, 0.18261295006111525,
#     0.18340543334394774, 0.20776292122091292, 0.18392871176329098, 0.176133625708261,
#     0.20087870531041696, 0.15655650574096755, 0.1960365837014284, 0.1983436530956395,
#     0.19747845723866303, 0.17995774363718461, 0.17161882593037944, 0.18681439421996696,
#     0.17788349816524446, 0.1854406192832847, 0.19388801164666025, 0.19972966988168334,
#     0.17034003740751033, 0.14411507564679282, 0.1485220097474524, 0.15051518047859566,
#     0.18250333450801617, 0.1502754939988495, 0.14630577918780094, 0.13112478653379397,
#     0.13845890537485311, 0.1360576072512909, 0.1332633143479789, 0.13218726092257058,
#     0.12238057967194038, 0.13047773741715327, 0.13281496366648443, 0.1345240162949401,
#     0.13212772797661523, 0.1320484218800172, 0.1328063784253297, 0.11824744677675696,
#     0.11963689289351585, 0.1356470913887609
# ]

# model_steps_3 = np.arange(50)  # Steps from 40000 to 2000000
# brier_scores_3 = [
#     0.1962645426319608, 0.16190233021330705, 0.1662015936286706, 0.14825471709574767,
#     0.15582415519232962, 0.17364286115422164, 0.195598202098847, 0.15901756307166945,
#     0.16264860096271322, 0.17490870423017554, 0.20937830999219403, 0.17475596251886924,
#     0.16145890938488378, 0.20971750729293648, 0.19308404127190237, 0.18731325708889246,
#     0.18542458250460406, 0.15499806839641825, 0.17513218807047767, 0.18539574383485544,
#     0.17302882565992533, 0.14536459487297917, 0.1637438600697416, 0.15704973981547543,
#     0.15947145222079123, 0.17356340854457805, 0.17183477303036682, 0.18598162439672433,
#     0.1507463188194112, 0.152246129696471, 0.16262194157398138, 0.16854609073951307,
#     0.19662634685645775, 0.1922693299000311, 0.16494939450258073, 0.14389814024489886,
#     0.1420430191611989, 0.13464575021697867, 0.1516984403788932, 0.15547483946774165,
#     0.13671632478719, 0.14938898489306213, 0.14792464805890052, 0.14796395552984873,
#     0.14268935338237143, 0.13311419615596573, 0.14581365712495858, 0.11925073944131975,
#     0.12456277182752308, 0.14165341399738665
# ]

# # Create the combined plot with labels for better comparison
# plt.figure(figsize=(10, 5))

# # Plot all three sequences with appropriate labels
# plt.plot(model_steps, brier_scores, marker='o', linestyle='-', color='b', label='N = 200')
folder_name = r"camera_with_frame_stacking_400k"
with open(rf"all_brier_scores_{folder_name}.json", "r") as f:
    data = json.load(f)
plt.figure(figsize=(10, 5))

#initial_success_probs = np.array(data["initial_success_prob"])
#predicted_brier_scores = initial_success_probs**2 * (1 - initial_success_probs) + (1 - initial_success_probs)**2 * initial_success_probs

plt.plot(model_steps_2, data["baseline"], marker='o', linestyle='-', color='b', label='Baseline')
#plt.plot(model_steps_2, predicted_brier_scores, marker='o', linestyle='-', color='b', alpha = 0.5, label='Baseline expected')
plt.plot(model_steps_2, data["XGBOOST"], marker='o', linestyle='-', color='c', label='XGBoost')
plt.plot(model_steps_2, data["model_single"], marker='s', linestyle='-', color='r', label='Single-time ML')
plt.plot(model_steps_2, data["model_full"], marker='s', linestyle='-', color='g', label='Full ML')
plt.plot(model_steps_2, data["model"], marker='s', linestyle='-', color='m', label='Incremental ML')


# plt.plot(model_steps_3, brier_scores_3, marker='^', linestyle='-', color='g', label='N = 100')
# expected imagine p(y) = 0.7, now 0.7 of the time will be 1 but 0.3 of the time will be zero,
# so 0.3^2 * (0.7) + 0.7^2 * (0.3) = 0.21
# Labels and title
plt.xlabel("Optimisation Steps")
plt.ylabel("Brier Score")
plt.title("Brier Score over Model Training")
plt.legend()
plt.grid(True)
plt.savefig(f"brier_score_incremental_vs_full_{folder_name}.png")
# Show the combined plot
plt.show()
